name: Deploy to Azure App Service

on:
  push:
    branches: [ prod ]
  pull_request:
    branches: [ prod ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: play-learn-spark-prod-app
  DOCKER_HUB_REPO: linoymalakkaran/play-learn-spark
  IMAGE_NAME: play-learn-spark-combined

jobs:
  # Job 1: Build and Push Docker Image (runs only when image doesn't exist or code changes)
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: 🏗️ Build and push Docker image
      run: |
        # Build the combined Docker image
        docker build -f Dockerfile.combined -t ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }} .
        docker build -f Dockerfile.combined -t ${{ env.DOCKER_HUB_REPO }}:latest .
        
        # Push both tagged versions
        docker push ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}
        docker push ${{ env.DOCKER_HUB_REPO }}:latest

  # Job 2: Deploy to Azure App Service (always runs, uses existing image or newly built one)
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: 🔄 Checkout code (for terraform)
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: 🔧 Terraform Init
      working-directory: azure-infra
      run: terraform init

    - name: 📋 Terraform Plan
      working-directory: azure-infra
      run: |
        terraform plan \
          -var="combined_docker_image=${{ env.DOCKER_HUB_REPO }}:latest" \
          -var="use_docker_hub=true" \
          -out=tfplan

    - name: 🚀 Terraform Apply
      working-directory: azure-infra
      run: terraform apply -auto-approve tfplan

    - name: 📤 Get App Service Details
      id: app-details
      working-directory: azure-infra
      run: |
        APP_NAME=$(terraform output -raw frontend_app_url | sed 's|https://||' | sed 's|\.azurewebsites\.net||')
        echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        echo "app_url=$(terraform output -raw frontend_app_url)" >> $GITHUB_OUTPUT

    - name: 🔄 Update App Service Container Settings
      run: |
        # Update the web app to use our Docker Hub container
        az webapp config container set \
          --name ${{ steps.app-details.outputs.app_name }} \
          --resource-group $(terraform -chdir=azure-infra output -raw resource_group_name) \
          --docker-custom-image-name ${{ env.DOCKER_HUB_REPO }}:latest \
          --docker-registry-server-url https://index.docker.io

    - name: 🔧 Configure App Service Settings
      run: |
        # Set application settings for production
        az webapp config appsettings set \
          --name ${{ steps.app-details.outputs.app_name }} \
          --resource-group $(terraform -chdir=azure-infra output -raw resource_group_name) \
          --settings \
            NODE_ENV=production \
            PORT=80 \
            WEBSITES_PORT=80 \
            DATABASE_PATH=/app/server/data/database.sqlite \
            CORS_ORIGIN="*" \
            APP_NAME=play-learn-spark \
            LOG_LEVEL=info \
            SECURITY_HEADERS=true

    - name: 🔄 Restart App Service
      run: |
        az webapp restart \
          --name ${{ steps.app-details.outputs.app_name }} \
          --resource-group $(terraform -chdir=azure-infra output -raw resource_group_name)

    - name: ⏳ Wait for Deployment
      run: |
        echo "Waiting 60 seconds for deployment to complete..."
        sleep 60

    - name: 🏥 Health Check
      run: |
        APP_URL="${{ steps.app-details.outputs.app_url }}"
        echo "Checking health at: $APP_URL/health"
        
        # Wait up to 5 minutes for the app to be healthy
        for i in {1..30}; do
          if curl -f -s "$APP_URL/health" > /dev/null; then
            echo "✅ App is healthy!"
            break
          else
            echo "⏳ Attempt $i: App not ready yet, waiting 10 seconds..."
            sleep 10
          fi
          
          if [ $i -eq 30 ]; then
            echo "❌ App failed to become healthy after 5 minutes"
            exit 1
          fi
        done

    - name: 🎉 Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application URL: ${{ steps.app-details.outputs.app_url }}"
        echo "🏥 Health Check: ${{ steps.app-details.outputs.app_url }}/health"
        echo "📱 Frontend: ${{ steps.app-details.outputs.app_url }}"
        echo "🔗 API: ${{ steps.app-details.outputs.app_url }}/api"

  # Job 3: Smoke Tests (optional, runs after deployment)
  smoke-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: 🔄 Get App URL
      working-directory: azure-infra
      run: |
        APP_URL=$(terraform output -raw frontend_app_url)
        echo "APP_URL=$APP_URL" >> $GITHUB_ENV

    - name: 🧪 Run Smoke Tests
      run: |
        echo "Running smoke tests against: $APP_URL"
        
        # Test 1: Health endpoint
        if curl -f -s "$APP_URL/health"; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        # Test 2: Frontend loads
        if curl -f -s "$APP_URL" | grep -q "Play Learn Spark"; then
          echo "✅ Frontend loads successfully"
        else
          echo "❌ Frontend failed to load"
          exit 1
        fi
        
        # Test 3: API endpoint responds
        if curl -f -s "$APP_URL/api/health" > /dev/null; then
          echo "✅ API health check passed"
        else
          echo "⚠️ API health check failed (this might be expected if endpoint doesn't exist)"
        fi

        echo "🎉 All smoke tests passed!"