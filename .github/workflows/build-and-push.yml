name: Build and Push Containers

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: playlearnspark-frontend
  IMAGE_NAME_BACKEND: playlearnspark-backend

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        working-directory: client
        run: npm ci
      
      - name: Build application
        working-directory: client
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: https://playlearnspark.dpdns.org/api
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.event.inputs.branch }}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        working-directory: server
        run: npm ci
      
      - name: Build TypeScript
        working-directory: server
        run: npm run build
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.event.inputs.branch }}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  summary:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## 🐳 Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Built:" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "✅ **Frontend**: \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "✅ **Backend**: \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next**: Use 'Deploy Application' workflow to deploy these images" >> $GITHUB_STEP_SUMMARY