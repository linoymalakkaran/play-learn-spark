name: CI - Tests and Quality Checks

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type checking
        run: npx tsc --noEmit
      
      - name: Run linting
        run: npm run lint
      
      - name: Run tests
        run: npm test -- --coverage
        env:
          NODE_ENV: test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: backend
          name: backend-coverage
      
      - name: Build project
        run: npm run build

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npx tsc --noEmit
      
      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Run bundle analyzer (if available)
        run: npm run analyze || echo "Bundle analyzer not available"
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit for backend
        run: cd server && npm audit --audit-level=high
        continue-on-error: true
      
      - name: Run npm audit for frontend
        run: cd client && npm audit --audit-level=high
        continue-on-error: true

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [client, server]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image for ${{ matrix.component }}
        run: |
          cd ${{ matrix.component }}
          docker build -t test-${{ matrix.component }}:latest .
      
      - name: Test Docker image
        run: |
          # Run a quick test to ensure the image works
          docker run --rm test-${{ matrix.component }}:latest --version || echo "Container started successfully"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, docker-build-test]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Backend tests: ${{ needs.test-backend.result }}"
          echo "Frontend tests: ${{ needs.test-frontend.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Docker build test: ${{ needs.docker-build-test.result }}"
          
          if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-frontend.result }}" != "success" ]]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.docker-build-test.result }}" != "success" ]]; then
            echo "❌ Docker build tests failed"
            exit 1
          fi
          
          echo "✅ All quality checks passed!"
      
      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 Quality Gate')
            );
            
            const body = `## 🔍 Quality Gate Results
            
            | Check | Status |
            |-------|--------|
            | Backend Tests | ${{ needs.test-backend.result == 'success' && '✅ Pass' || '❌ Fail' }} |
            | Frontend Tests | ${{ needs.test-frontend.result == 'success' && '✅ Pass' || '❌ Fail' }} |
            | Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Pass' || '⚠️ Check' }} |
            | Docker Build | ${{ needs.docker-build-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |
            
            **Overall**: ${{ (needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.docker-build-test.result == 'success') && '✅ All checks passed' || '❌ Some checks failed' }}
            
            _Updated: $(date)_`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }