name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy from"
        required: true
        default: "dev"
      image_tag:
        description: "Image tag to deploy (default latest)"
        required: false
        default: "latest"

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'dev' }}

      - name: Azure CLI Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get resource information
        id: azure_resources
        run: |
          # Always use dev environment since that's where our resources exist
          ENVIRONMENT=dev
          
          # Get storage account name from the resource group
          STORAGE_ACCOUNT=$(az storage account list \
            --resource-group play-learn-spark-${ENVIRONMENT}-rg \
            --query "[0].name" \
            --output tsv)
          
          # Get container group FQDN
          BACKEND_FQDN=$(az container show \
            --name play-learn-spark-${ENVIRONMENT}-backend \
            --resource-group play-learn-spark-${ENVIRONMENT}-rg \
            --query "ipAddress.fqdn" \
            --output tsv 2>/dev/null || echo "")
          
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "STORAGE=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "BACKEND=$BACKEND_FQDN" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Build frontend
        working-directory: client
        run: |
          npm ci
          # Set production backend URL for Azure deployment
          echo "VITE_API_BASE_URL=http://play-learn-spark-dev-backend.eastus.azurecontainer.io:3000/api" > .env.production
          npm run build

      - name: Upload frontend dist to static site
        run: |
          az storage blob upload-batch \
            --destination '$web' \
            --account-name ${{ steps.azure_resources.outputs.STORAGE }} \
            --source client/dist \
            --overwrite

      - name: Update backend container image using Terraform
        working-directory: azure-infra
        run: |
          IMAGE_TAG=${{ github.event.inputs.image_tag || 'latest' }}
          
          # Initialize Terraform
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=play-learn-spark-dev.tfstate"
          
          # Apply Terraform with the new image tag
          terraform apply -auto-approve \
            -var environment=dev \
            -var image_tag=${IMAGE_TAG} \
            -var mongodb_atlas_connection_string="${{ secrets.MONGODB_ATLAS_URI }}" \
            -var jwt_secret="${{ secrets.JWT_SECRET }}" \
            -var google_ai_api_key="${{ secrets.GOOGLE_AI_API_KEY }}" \
            -var github_username=${{ github.actor }} \
            -var github_token="${{ secrets.GITHUB_TOKEN }}"

      - name: Output URLs
        working-directory: azure-infra
        run: |
          echo "Frontend: https://${{ steps.azure_resources.outputs.STORAGE }}.z13.web.core.windows.net"
          echo "Backend: http://$(terraform output -raw backend_fqdn):3000"
          echo "Backend IP: $(terraform output -raw backend_ip):3000"
          echo "Log Analytics: $(terraform output -raw log_analytics_workspace_name)"
