name: Deploy to Azure Development

on:
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]

env:
  AZURE_RESOURCE_GROUP: rg-play-learn-spark-dev
  AZURE_LOCATION: eastus
  ACR_NAME: playlearnspark
  FRONTEND_APP_NAME: play-learn-spark-frontend-dev
  BACKEND_APP_NAME: play-learn-spark-backend-dev
  REGISTRY_URL: playlearnspark.azurecr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      should-deploy: ${{ steps.should-deploy.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
            backend:
              - 'server/**'
      
      - name: Determine if should deploy
        id: should-deploy
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Only deploy on PR if there are significant changes
            if [[ "${{ steps.changes.outputs.frontend }}" == "true" || "${{ steps.changes.outputs.backend }}" == "true" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
            else
              echo "result=false" >> $GITHUB_OUTPUT
            fi
          fi

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
      
      - name: Run linting
        run: npm run lint

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: development
          VITE_API_URL: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend]
    if: needs.detect-changes.outputs.should-deploy == 'true' && needs.detect-changes.outputs.backend-changed == 'true'
    
    defaults:
      run:
        working-directory: server
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          # Build and tag the image with dev tag
          docker build -t ${{ env.REGISTRY_URL }}/play-learn-spark-backend:dev-${{ github.sha }} \
                       -t ${{ env.REGISTRY_URL }}/play-learn-spark-backend:dev-latest .
          
          # Push the image
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-backend:dev-${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-backend:dev-latest
      
      - name: Deploy to Azure App Service
        run: |
          az webapp config container set \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.REGISTRY_URL }}/play-learn-spark-backend:dev-${{ github.sha }}
          
          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend, deploy-backend]
    if: always() && needs.detect-changes.outputs.should-deploy == 'true' && needs.detect-changes.outputs.frontend-changed == 'true'
    
    defaults:
      run:
        working-directory: client
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: development
          VITE_API_URL: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          # Build and tag the image with dev tag
          docker build -t ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:dev-${{ github.sha }} \
                       -t ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:dev-latest .
          
          # Push the image
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:dev-${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:dev-latest
      
      - name: Deploy to Azure App Service
        run: |
          az webapp config container set \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:dev-${{ github.sha }}
          
          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

  comment-pr:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.event_name == 'pull_request' && always()
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üöÄ Deployment Preview')
            );
            
            let deploymentStatus = '';
            
            if ('${{ needs.deploy-backend.result }}' === 'success') {
              deploymentStatus += '‚úÖ **Backend**: Deployed to https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net\n';
            } else if ('${{ needs.deploy-backend.result }}' === 'failure') {
              deploymentStatus += '‚ùå **Backend**: Deployment failed\n';
            } else {
              deploymentStatus += '‚è≠Ô∏è **Backend**: No changes detected, skipped deployment\n';
            }
            
            if ('${{ needs.deploy-frontend.result }}' === 'success') {
              deploymentStatus += '‚úÖ **Frontend**: Deployed to https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net\n';
            } else if ('${{ needs.deploy-frontend.result }}' === 'failure') {
              deploymentStatus += '‚ùå **Frontend**: Deployment failed\n';
            } else {
              deploymentStatus += '‚è≠Ô∏è **Frontend**: No changes detected, skipped deployment\n';
            }
            
            const body = `## üöÄ Deployment Preview
            
            ${deploymentStatus}
            
            **Commit**: ${context.sha.slice(0, 7)}
            **Branch**: ${context.payload.pull_request.head.ref}
            
            _This comment will be updated with each new deployment._`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }