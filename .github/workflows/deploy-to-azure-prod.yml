name: Deploy to Azure Production

on:
  push:
    branches: [ prod ]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure (Terraform)'
        required: false
        default: 'false'
        type: boolean
      force_deploy:
        description: 'Force deploy even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  AZURE_RESOURCE_GROUP: rg-play-learn-spark-prod
  AZURE_LOCATION: eastus
  ACR_NAME: playlearnspark
  FRONTEND_APP_NAME: play-learn-spark-frontend-prod
  BACKEND_APP_NAME: play-learn-spark-backend-prod
  REGISTRY_URL: playlearnspark.azurecr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
            backend:
              - 'server/**'
            infrastructure:
              - 'azure-infra/**'

  setup-infrastructure:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event.inputs.deploy_infrastructure == 'true'
    
    defaults:
      run:
        working-directory: azure-infra
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="environment=prod" \
            -var="project_name=play-learn-spark" \
            -var="location=${{ env.AZURE_LOCATION }}" \
            -var="app_service_plan_sku=P1v2" \
            -out=tfplan
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      
      - name: Get ACR Login Server
        id: acr-details
        run: |
          ACR_LOGIN_SERVER=$(az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query loginServer --output tsv)
          echo "acr-login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

  build-and-deploy-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-infrastructure]
    if: always() && (needs.detect-changes.outputs.backend-changed == 'true' || github.event.inputs.force_deploy == 'true')
    
    defaults:
      run:
        working-directory: server
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          # Build and tag the image
          docker build -t ${{ env.REGISTRY_URL }}/play-learn-spark-backend:${{ github.sha }} \
                       -t ${{ env.REGISTRY_URL }}/play-learn-spark-backend:latest .
          
          # Push the image
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-backend:${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-backend:latest
      
      - name: Deploy to Azure App Service
        run: |
          az webapp config container set \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.REGISTRY_URL }}/play-learn-spark-backend:${{ github.sha }}
          
          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
      
      - name: Verify deployment
        run: |
          # Wait for the deployment to be ready
          sleep 30
          
          # Get the app service URL
          APP_URL=$(az webapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query defaultHostName --output tsv)
          
          # Health check
          curl -f "https://$APP_URL/health" || exit 1
          echo "Backend deployment successful: https://$APP_URL"

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-infrastructure, build-and-deploy-backend]
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.force_deploy == 'true')
    
    defaults:
      run:
        working-directory: client
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          # Build and tag the image
          docker build -t ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:${{ github.sha }} \
                       -t ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:latest .
          
          # Push the image
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:latest
      
      - name: Deploy to Azure App Service
        run: |
          az webapp config container set \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:${{ github.sha }}
          
          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
      
      - name: Verify deployment
        run: |
          # Wait for the deployment to be ready
          sleep 30
          
          # Get the app service URL
          APP_URL=$(az webapp show --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query defaultHostName --output tsv)
          
          # Health check
          curl -f "https://$APP_URL" || exit 1
          echo "Frontend deployment successful: https://$APP_URL"

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend, build-and-deploy-backend]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Applications Deployed:" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-and-deploy-backend.result }}" == "success" ]]; then
            echo "✅ **Backend**: Successfully deployed to https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-and-deploy-frontend.result }}" == "success" ]]; then
            echo "✅ **Frontend**: Successfully deployed to https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY