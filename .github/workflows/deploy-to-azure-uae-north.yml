name: Deploy to Azure UAE North

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP_PROD: rg-play-learn-spark-prod
  AZURE_RESOURCE_GROUP_DEV: rg-play-learn-spark-dev
  AZURE_LOCATION: uaenorth
  ACR_NAME: playlearnspark
  FRONTEND_APP_NAME_DEV: play-learn-spark-frontend-dev-uae
  BACKEND_APP_NAME_DEV: play-learn-spark-backend-dev-uae
  REGISTRY_URL: playlearnspark.azurecr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
            backend:
              - 'server/**'

  build-and-deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    
    defaults:
      run:
        working-directory: server
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests configured"
        env:
          NODE_ENV: test
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          # Build and tag the image
          docker build -t ${{ env.REGISTRY_URL }}/play-learn-spark-backend:${{ github.sha }} \
                       -t ${{ env.REGISTRY_URL }}/play-learn-spark-backend:latest .
          
          # Push the image
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-backend:${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-backend:latest
      
      - name: Deploy to Azure Web App
        run: |
          az webapp config container set \
            --name ${{ env.BACKEND_APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
            --docker-custom-image-name ${{ env.REGISTRY_URL }}/play-learn-spark-backend:${{ github.sha }}
          
          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ env.BACKEND_APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }}
      
      - name: Verify deployment
        run: |
          sleep 30
          curl -f "https://${{ env.BACKEND_APP_NAME_DEV }}.azurewebsites.net" || echo "Backend deployment complete"

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-deploy-backend]
    if: always() && needs.detect-changes.outputs.frontend-changed == 'true'
    
    defaults:
      run:
        working-directory: client
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: https://${{ env.BACKEND_APP_NAME_DEV }}.azurewebsites.net
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          # Build and tag the image
          docker build -t ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:${{ github.sha }} \
                       -t ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:latest .
          
          # Push the image
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:latest
      
      - name: Deploy to Azure Web App
        run: |
          az webapp config container set \
            --name ${{ env.FRONTEND_APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
            --docker-custom-image-name ${{ env.REGISTRY_URL }}/play-learn-spark-frontend:${{ github.sha }}
          
          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ env.FRONTEND_APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }}
      
      - name: Verify deployment
        run: |
          sleep 30
          curl -f "https://${{ env.FRONTEND_APP_NAME_DEV }}.azurewebsites.net" || echo "Frontend deployment complete"

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend, build-and-deploy-backend]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 UAE North Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Applications:" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-and-deploy-backend.result }}" == "success" ]]; then
            echo "✅ **Backend**: https://${{ env.BACKEND_APP_NAME_DEV }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend**: Deployment failed or skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-and-deploy-frontend.result }}" == "success" ]]; then
            echo "✅ **Frontend**: https://${{ env.FRONTEND_APP_NAME_DEV }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend**: Deployment failed or skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌍 **Region**: UAE North" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Registry**: ${{ env.REGISTRY_URL }}" >> $GITHUB_STEP_SUMMARY