import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Switch } from '@/components/ui/switch';

import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar
} from 'recharts';

import {
  Share,
  Send,
  Users,
  User,
  Calendar,
  Clock,
  Target,
  TrendingUp,
  TrendingDown,
  Award,
  Star,
  BookOpen,
  Brain,
  Heart,
  Zap,
  CheckCircle,
  AlertTriangle,
  Info,
  Eye,
  EyeOff,
  Download,
  Upload,
  FileText,
  Image,
  Video,
  MessageCircle,
  Mail,
  Phone,
  Settings,
  Filter,
  Search,
  Plus,
  Minus,
  Edit,
  Trash2,
  Copy,
  ExternalLink,
  RefreshCw,
  Save,
  X,
  Check,
  ChevronDown,
  ChevronRight,
  ChevronLeft,
  MoreVertical,
  Flag,
  Bookmark,
  Archive,
  Pin,
  ThumbsUp,
  Smile
} from 'lucide-react';

interface ProgressSharingProps {
  userRole: 'teacher' | 'admin';
  teacherId: string;
  classId?: string;
}

interface Student {
  id: string;
  name: string;
  avatar?: string;
  grade: string;
  parents: Parent[];
  currentLevel: number;
  totalPoints: number;
  activitiesCompleted: number;
  averageScore: number;
  weeklyProgress: number;
  strengths: string[];
  challengeAreas: string[];
  recentAchievements: Achievement[];
  lastActive: Date;
}

interface Parent {
  id: string;
  name: string;
  email: string;
  phone?: string;
  relationship: 'mother' | 'father' | 'guardian';
  preferredContact: 'email' | 'sms' | 'phone' | 'app';
  notificationSettings: {
    weekly: boolean;
    achievements: boolean;
    concerns: boolean;
    assignments: boolean;
  };
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  earnedAt: Date;
  category: 'academic' | 'behavioral' | 'social' | 'creative';
  icon: string;
}

interface ProgressReport {
  id: string;
  studentId: string;
  studentName: string;
  type: 'weekly' | 'monthly' | 'custom' | 'achievement' | 'concern';
  title: string;
  content: string;
  metrics: ProgressMetric[];
  attachments: Attachment[];
  recipients: string[];
  scheduledDate?: Date;
  sentAt?: Date;
  status: 'draft' | 'scheduled' | 'sent' | 'read';
  template?: string;
  visibility: 'private' | 'parents' | 'guardians' | 'all';
  autoGenerated: boolean;
  tags: string[];
  priority: 'low' | 'medium' | 'high';
}

interface ProgressMetric {
  id: string;
  name: string;
  value: number;
  previousValue?: number;
  unit: string;
  trend: 'up' | 'down' | 'stable';
  category: 'academic' | 'behavioral' | 'engagement' | 'social';
  description?: string;
}

interface Attachment {
  id: string;
  name: string;
  type: 'image' | 'video' | 'document' | 'chart';
  url: string;
  size: number;
  description?: string;
}

interface ShareTemplate {
  id: string;
  name: string;
  description: string;
  category: 'weekly' | 'achievement' | 'concern' | 'general';
  content: string;
  metrics: string[];
  isDefault: boolean;
  isPublic: boolean;
  createdBy: string;
  tags: string[];
}

const ProgressSharing: React.FC<ProgressSharingProps> = ({
  userRole,
  teacherId,
  classId
}) => {
  // State
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'create' | 'scheduled' | 'sent' | 'templates'>('create');
  const [selectedStudents, setSelectedStudents] = useState<Set<string>>(new Set());
  const [showPreview, setShowPreview] = useState(false);
  const [showTemplateDialog, setShowTemplateDialog] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<string>('all');

  // Report creation
  const [reportData, setReportData] = useState<Partial<ProgressReport>>({
    type: 'weekly',
    title: '',
    content: '',
    metrics: [],
    attachments: [],
    recipients: [],
    visibility: 'parents',
    autoGenerated: false,
    tags: [],
    priority: 'medium'
  });

  // Data
  const [students, setStudents] = useState<Student[]>([
    {
      id: '1',
      name: 'Emma Johnson',
      avatar: '/avatars/emma.jpg',
      grade: '3rd Grade',
      parents: [
        {
          id: 'p1',
          name: 'Sarah Johnson',
          email: 'sarah.johnson@email.com',
          phone: '+1-555-0123',
          relationship: 'mother',
          preferredContact: 'email',
          notificationSettings: {
            weekly: true,
            achievements: true,
            concerns: true,
            assignments: false
          }
        },
        {
          id: 'p2',
          name: 'Mike Johnson',
          email: 'mike.johnson@email.com',
          relationship: 'father',
          preferredContact: 'sms',
          notificationSettings: {
            weekly: false,
            achievements: true,
            concerns: true,
            assignments: false
          }
        }
      ],
      currentLevel: 15,
      totalPoints: 2450,
      activitiesCompleted: 48,
      averageScore: 87,
      weeklyProgress: 92,
      strengths: ['Reading Comprehension', 'Problem Solving', 'Creativity'],
      challengeAreas: ['Multiplication Facts', 'Time Management'],
      recentAchievements: [
        {
          id: 'a1',
          title: 'Reading Champion',
          description: 'Completed 10 reading activities with 90%+ accuracy',
          earnedAt: new Date('2024-01-20'),
          category: 'academic',
          icon: 'üìö'
        },
        {
          id: 'a2',
          title: 'Helpful Friend',
          description: 'Assisted classmates during group activities',
          earnedAt: new Date('2024-01-19'),
          category: 'social',
          icon: 'ü§ù'
        }
      ],
      lastActive: new Date('2024-01-20T15:30:00')
    },
    {
      id: '2',
      name: 'Liam Chen',
      avatar: '/avatars/liam.jpg',
      grade: '3rd Grade',
      parents: [
        {
          id: 'p3',
          name: 'Lisa Chen',
          email: 'lisa.chen@email.com',
          relationship: 'mother',
          preferredContact: 'app',
          notificationSettings: {
            weekly: true,
            achievements: true,
            concerns: true,
            assignments: true
          }
        }
      ],
      currentLevel: 12,
      totalPoints: 1890,
      activitiesCompleted: 42,
      averageScore: 78,
      weeklyProgress: 85,
      strengths: ['Math Operations', 'Logical Thinking', 'Focus'],
      challengeAreas: ['Reading Fluency', 'Written Expression'],
      recentAchievements: [
        {
          id: 'a3',
          title: 'Math Wizard',
          description: 'Solved 20 math problems in a row correctly',
          earnedAt: new Date('2024-01-18'),
          category: 'academic',
          icon: 'üßÆ'
        }
      ],
      lastActive: new Date('2024-01-20T14:15:00')
    },
    {
      id: '3',
      name: 'Sophia Rodriguez',
      avatar: '/avatars/sophia.jpg',
      grade: '3rd Grade',
      parents: [
        {
          id: 'p4',
          name: 'Maria Rodriguez',
          email: 'maria.rodriguez@email.com',
          phone: '+1-555-0456',
          relationship: 'mother',
          preferredContact: 'email',
          notificationSettings: {
            weekly: true,
            achievements: true,
            concerns: true,
            assignments: true
          }
        }
      ],
      currentLevel: 18,
      totalPoints: 3120,
      activitiesCompleted: 56,
      averageScore: 94,
      weeklyProgress: 88,
      strengths: ['Creative Writing', 'Science Inquiry', 'Leadership'],
      challengeAreas: ['Math Speed', 'Following Directions'],
      recentAchievements: [
        {
          id: 'a4',
          title: 'Science Explorer',
          description: 'Completed all science experiments with excellent observations',
          earnedAt: new Date('2024-01-20'),
          category: 'academic',
          icon: 'üî¨'
        },
        {
          id: 'a5',
          title: 'Team Leader',
          description: 'Led group project to successful completion',
          earnedAt: new Date('2024-01-19'),
          category: 'social',
          icon: 'üëë'
        }
      ],
      lastActive: new Date('2024-01-20T16:45:00')
    }
  ]);

  const [progressReports, setProgressReports] = useState<ProgressReport[]>([
    {
      id: '1',
      studentId: '1',
      studentName: 'Emma Johnson',
      type: 'weekly',
      title: 'Emma\'s Weekly Progress - Week of Jan 15',
      content: 'Emma has had an excellent week! She completed 12 activities and earned 450 points. Her reading comprehension skills continue to improve, and she earned the "Reading Champion" badge. Areas to focus on: multiplication facts practice.',
      metrics: [
        {
          id: 'm1',
          name: 'Activities Completed',
          value: 12,
          previousValue: 10,
          unit: 'activities',
          trend: 'up',
          category: 'engagement'
        },
        {
          id: 'm2',
          name: 'Average Score',
          value: 87,
          previousValue: 82,
          unit: '%',
          trend: 'up',
          category: 'academic'
        },
        {
          id: 'm3',
          name: 'Reading Level',
          value: 92,
          previousValue: 88,
          unit: '%',
          trend: 'up',
          category: 'academic'
        }
      ],
      attachments: [
        {
          id: 'att1',
          name: 'Reading_Progress_Chart.png',
          type: 'chart',
          url: '/attachments/chart1.png',
          size: 245760,
          description: 'Weekly reading progress visualization'
        }
      ],
      recipients: ['p1', 'p2'],
      sentAt: new Date('2024-01-20T09:00:00'),
      status: 'sent',
      visibility: 'parents',
      autoGenerated: true,
      tags: ['weekly', 'progress', 'reading'],
      priority: 'medium'
    },
    {
      id: '2',
      studentId: '2',
      studentName: 'Liam Chen',
      type: 'achievement',
      title: 'Liam Earned Math Wizard Badge!',
      content: 'Congratulations! Liam earned the "Math Wizard" badge today by solving 20 consecutive math problems correctly. His dedication to practice is really paying off!',
      metrics: [
        {
          id: 'm4',
          name: 'Math Accuracy',
          value: 95,
          previousValue: 78,
          unit: '%',
          trend: 'up',
          category: 'academic'
        }
      ],
      attachments: [],
      recipients: ['p3'],
      sentAt: new Date('2024-01-18T14:30:00'),
      status: 'read',
      visibility: 'parents',
      autoGenerated: false,
      tags: ['achievement', 'math', 'badge'],
      priority: 'high'
    }
  ]);

  const [templates, setTemplates] = useState<ShareTemplate[]>([
    {
      id: '1',
      name: 'Weekly Progress Summary',
      description: 'Comprehensive weekly overview of student progress',
      category: 'weekly',
      content: '{studentName} has had a {progressDescription} week! They completed {activitiesCompleted} activities and earned {pointsEarned} points. Strengths: {strengths}. Areas for improvement: {challengeAreas}.',
      metrics: ['activitiesCompleted', 'averageScore', 'weeklyProgress', 'timeSpent'],
      isDefault: true,
      isPublic: true,
      createdBy: teacherId,
      tags: ['weekly', 'comprehensive']
    },
    {
      id: '2',
      name: 'Achievement Celebration',
      description: 'Share exciting achievements and milestones',
      category: 'achievement',
      content: 'Exciting news! {studentName} has achieved {achievementTitle}! {achievementDescription}. This shows great progress in {skillArea}.',
      metrics: ['currentLevel', 'totalPoints', 'recentAchievements'],
      isDefault: true,
      isPublic: true,
      createdBy: teacherId,
      tags: ['achievement', 'celebration']
    },
    {
      id: '3',
      name: 'Areas of Concern',
      description: 'Address learning challenges and provide support suggestions',
      category: 'concern',
      content: 'I wanted to discuss {studentName}\'s progress in {concernArea}. Current performance: {currentLevel}. Suggested support strategies: {suggestions}. Let\'s work together to help {studentName} succeed.',
      metrics: ['challengeAreas', 'averageScore', 'weeklyProgress'],
      isDefault: false,
      isPublic: false,
      createdBy: teacherId,
      tags: ['concern', 'support']
    }
  ]);

  useEffect(() => {
    // Simulate data loading
    setTimeout(() => setIsLoading(false), 1000);
  }, []);

  const filteredStudents = students.filter(student => 
    !searchQuery || student.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const getProgressColor = (percentage: number) => {
    if (percentage >= 90) return 'text-green-600';
    if (percentage >= 70) return 'text-blue-600';
    if (percentage >= 50) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {
    switch (trend) {
      case 'up': return <TrendingUp className="w-4 h-4 text-green-600" />;
      case 'down': return <TrendingDown className="w-4 h-4 text-red-600" />;
      default: return <div className="w-4 h-4 bg-gray-400 rounded-full" />;
    }
  };

  const generateProgressReport = (student: Student, template: ShareTemplate) => {
    let content = template.content;
    
    // Replace placeholders with actual data
    content = content.replace('{studentName}', student.name);
    content = content.replace('{activitiesCompleted}', student.activitiesCompleted.toString());
    content = content.replace('{pointsEarned}', student.totalPoints.toString());
    content = content.replace('{strengths}', student.strengths.join(', '));
    content = content.replace('{challengeAreas}', student.challengeAreas.join(', '));
    content = content.replace('{averageScore}', `${student.averageScore}%`);
    content = content.replace('{weeklyProgress}', `${student.weeklyProgress}%`);
    
    // Determine progress description
    const progressDescription = student.weeklyProgress >= 85 ? 'fantastic' : 
                              student.weeklyProgress >= 70 ? 'good' : 'challenging';
    content = content.replace('{progressDescription}', progressDescription);

    return content;
  };

  const createReport = (studentIds: string[], templateId?: string) => {
    const template = templateId ? templates.find(t => t.id === templateId) : templates[0];
    if (!template) return;

    studentIds.forEach(studentId => {
      const student = students.find(s => s.id === studentId);
      if (!student) return;

      const newReport: ProgressReport = {
        id: `report-${Date.now()}-${studentId}`,
        studentId,
        studentName: student.name,
        type: template.category as ProgressReport['type'],
        title: `${student.name}'s ${template.name}`,
        content: generateProgressReport(student, template),
        metrics: template.metrics.map(metricName => ({
          id: `metric-${Date.now()}-${metricName}`,
          name: metricName,
          value: (student as any)[metricName] || 0,
          unit: metricName.includes('Score') || metricName.includes('Progress') ? '%' : 
                metricName.includes('Points') ? 'points' : 
                metricName.includes('Activities') ? 'activities' : 'units',
          trend: 'stable' as const,
          category: 'academic' as const
        })),
        attachments: [],
        recipients: student.parents.map(p => p.id),
        status: 'draft',
        template: templateId,
        visibility: 'parents',
        autoGenerated: false,
        tags: template.tags,
        priority: 'medium'
      };

      setProgressReports(prev => [...prev, newReport]);
    });
  };

  const sendReport = (reportId: string) => {
    setProgressReports(prev => prev.map(report => 
      report.id === reportId 
        ? { ...report, status: 'sent', sentAt: new Date() }
        : report
    ));
  };

  const scheduleReport = (reportId: string, date: Date) => {
    setProgressReports(prev => prev.map(report => 
      report.id === reportId 
        ? { ...report, status: 'scheduled', scheduledDate: date }
        : report
    ));
  };

  const toggleStudentSelection = (studentId: string) => {
    const newSelection = new Set(selectedStudents);
    if (newSelection.has(studentId)) {
      newSelection.delete(studentId);
    } else {
      newSelection.add(studentId);
    }
    setSelectedStudents(newSelection);
  };

  const selectAllStudents = () => {
    if (selectedStudents.size === filteredStudents.length) {
      setSelectedStudents(new Set());
    } else {
      setSelectedStudents(new Set(filteredStudents.map(s => s.id)));
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <RefreshCw className="w-8 h-8 animate-spin text-purple-600" />
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
            <Share className="w-8 h-8 text-purple-600" />
            Progress Sharing
          </h1>
          <p className="text-gray-600 mt-1">
            Share student progress and achievements with parents
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={() => setShowTemplateDialog(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Create Template
          </Button>
          <Button 
            onClick={() => createReport(Array.from(selectedStudents))}
            disabled={selectedStudents.size === 0}
          >
            <Send className="w-4 h-4 mr-2" />
            Create Report
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab as any}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="create">Create Reports</TabsTrigger>
          <TabsTrigger value="scheduled">Scheduled</TabsTrigger>
          <TabsTrigger value="sent">Sent Reports</TabsTrigger>
          <TabsTrigger value="templates">Templates</TabsTrigger>
        </TabsList>

        {/* Create Reports Tab */}
        <TabsContent value="create" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Student Selection */}
            <Card className="lg:col-span-2">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">Select Students</CardTitle>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={selectAllStudents}
                    >
                      {selectedStudents.size === filteredStudents.length ? 'Deselect All' : 'Select All'}
                    </Button>
                    <span className="text-sm text-gray-600">
                      {selectedStudents.size} selected
                    </span>
                  </div>
                </div>
                
                <div className="relative">
                  <Search className="w-4 h-4 absolute left-3 top-3 text-gray-400" />
                  <Input
                    placeholder="Search students..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-9"
                  />
                </div>
              </CardHeader>
              
              <CardContent>
                <ScrollArea className="h-96">
                  <div className="space-y-3">
                    {filteredStudents.map((student) => (
                      <div
                        key={student.id}
                        className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                          selectedStudents.has(student.id)
                            ? 'border-purple-500 bg-purple-50'
                            : 'border-gray-200 hover:bg-gray-50'
                        }`}
                        onClick={() => toggleStudentSelection(student.id)}
                      >
                        <div className="flex items-center gap-4">
                          <Checkbox
                            checked={selectedStudents.has(student.id)}
                            onChange={() => toggleStudentSelection(student.id)}
                          />
                          
                          <Avatar className="w-12 h-12">
                            <AvatarImage src={student.avatar} />
                            <AvatarFallback>
                              {student.name.split(' ').map(n => n[0]).join('')}
                            </AvatarFallback>
                          </Avatar>
                          
                          <div className="flex-1">
                            <h4 className="font-semibold">{student.name}</h4>
                            <p className="text-sm text-gray-600">{student.grade}</p>
                            
                            <div className="flex items-center gap-4 mt-2 text-xs">
                              <div className="flex items-center gap-1">
                                <Target className="w-3 h-3" />
                                <span>Level {student.currentLevel}</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <Star className="w-3 h-3" />
                                <span>{student.totalPoints} pts</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <TrendingUp className="w-3 h-3" />
                                <span className={getProgressColor(student.weeklyProgress)}>
                                  {student.weeklyProgress}%
                                </span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="text-right">
                            <Badge variant="outline" className="mb-1">
                              {student.parents.length} parent{student.parents.length !== 1 ? 's' : ''}
                            </Badge>
                            <p className="text-xs text-gray-500">
                              {student.recentAchievements.length} recent achievements
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>

            {/* Quick Actions & Templates */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 gap-2">
                  {templates.filter(t => t.isDefault).map((template) => (
                    <Button
                      key={template.id}
                      variant="outline"
                      className="justify-start h-auto p-4"
                      onClick={() => createReport(Array.from(selectedStudents), template.id)}
                      disabled={selectedStudents.size === 0}
                    >
                      <div className="text-left">
                        <div className="font-medium">{template.name}</div>
                        <div className="text-sm text-gray-600">{template.description}</div>
                      </div>
                    </Button>
                  ))}
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <h4 className="font-medium">Bulk Actions</h4>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full"
                    disabled={selectedStudents.size === 0}
                    onClick={() => {
                      // Generate weekly reports for all selected students
                      createReport(Array.from(selectedStudents), '1');
                    }}
                  >
                    <Calendar className="w-4 h-4 mr-2" />
                    Send Weekly Updates
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full"
                    disabled={selectedStudents.size === 0}
                    onClick={() => {
                      // Generate achievement reports
                      createReport(Array.from(selectedStudents), '2');
                    }}
                  >
                    <Award className="w-4 h-4 mr-2" />
                    Share Achievements
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Scheduled Reports Tab */}
        <TabsContent value="scheduled" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Scheduled Reports</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {progressReports.filter(r => r.status === 'scheduled').map((report) => (
                  <ReportCard
                    key={report.id}
                    report={report}
                    onSend={() => sendReport(report.id)}
                    onEdit={() => console.log('Edit report', report.id)}
                    onDelete={() => setProgressReports(prev => prev.filter(r => r.id !== report.id))}
                    showActions={true}
                  />
                ))}
                
                {progressReports.filter(r => r.status === 'scheduled').length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Calendar className="w-12 h-12 mx-auto mb-4" />
                    <p>No scheduled reports</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Sent Reports Tab */}
        <TabsContent value="sent" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Sent Reports</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {progressReports.filter(r => r.status === 'sent' || r.status === 'read').map((report) => (
                  <ReportCard
                    key={report.id}
                    report={report}
                    onSend={() => {}}
                    onEdit={() => {}}
                    onDelete={() => {}}
                    showActions={false}
                  />
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Templates Tab */}
        <TabsContent value="templates" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {templates.map((template) => (
              <Card key={template.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{template.name}</CardTitle>
                    <div className="flex items-center gap-1">
                      {template.isDefault && <Badge variant="secondary">Default</Badge>}
                      {template.isPublic && <Badge variant="outline">Public</Badge>}
                    </div>
                  </div>
                  <p className="text-sm text-gray-600">{template.description}</p>
                </CardHeader>
                
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <Label className="text-xs font-medium text-gray-500">CONTENT PREVIEW</Label>
                      <p className="text-sm mt-1 p-2 bg-gray-50 rounded text-gray-700 line-clamp-3">
                        {template.content}
                      </p>
                    </div>
                    
                    <div>
                      <Label className="text-xs font-medium text-gray-500">METRICS</Label>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {template.metrics.map((metric) => (
                          <Badge key={metric} variant="outline" className="text-xs">
                            {metric}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <div>
                      <Label className="text-xs font-medium text-gray-500">TAGS</Label>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {template.tags.map((tag) => (
                          <Badge key={tag} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        className="flex-1"
                        onClick={() => {
                          if (selectedStudents.size > 0) {
                            createReport(Array.from(selectedStudents), template.id);
                          }
                        }}
                        disabled={selectedStudents.size === 0}
                      >
                        Use Template
                      </Button>
                      <Button variant="ghost" size="sm">
                        <Edit className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>

      {/* Template Creation Dialog */}
      <Dialog open={showTemplateDialog} onOpenChange={setShowTemplateDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New Template</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="template-name">Template Name</Label>
              <Input id="template-name" placeholder="Enter template name" />
            </div>
            
            <div>
              <Label htmlFor="template-description">Description</Label>
              <Input id="template-description" placeholder="Brief description of this template" />
            </div>
            
            <div>
              <Label htmlFor="template-category">Category</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="weekly">Weekly Progress</SelectItem>
                  <SelectItem value="achievement">Achievement</SelectItem>
                  <SelectItem value="concern">Concern</SelectItem>
                  <SelectItem value="general">General</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="template-content">Content Template</Label>
              <Textarea
                id="template-content"
                placeholder="Use placeholders like {studentName}, {activitiesCompleted}, etc."
                rows={6}
              />
            </div>
            
            <div className="flex items-center gap-4">
              <div className="flex items-center space-x-2">
                <Checkbox id="is-default" />
                <Label htmlFor="is-default">Set as default</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox id="is-public" />
                <Label htmlFor="is-public">Make public</Label>
              </div>
            </div>
            
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setShowTemplateDialog(false)}>
                Cancel
              </Button>
              <Button onClick={() => setShowTemplateDialog(false)}>
                Create Template
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

// Report Card Component
interface ReportCardProps {
  report: ProgressReport;
  onSend: () => void;
  onEdit: () => void;
  onDelete: () => void;
  showActions: boolean;
}

const ReportCard: React.FC<ReportCardProps> = ({
  report,
  onSend,
  onEdit,
  onDelete,
  showActions
}) => {
  const getStatusColor = (status: ProgressReport['status']) => {
    switch (status) {
      case 'sent': return 'text-green-600 bg-green-50';
      case 'read': return 'text-blue-600 bg-blue-50';
      case 'scheduled': return 'text-orange-600 bg-orange-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  return (
    <div className="border rounded-lg p-4">
      <div className="flex items-start justify-between mb-3">
        <div>
          <h4 className="font-semibold">{report.title}</h4>
          <p className="text-sm text-gray-600">For: {report.studentName}</p>
        </div>
        <div className="flex items-center gap-2">
          <Badge className={getStatusColor(report.status)}>
            {report.status.toUpperCase()}
          </Badge>
          {report.priority === 'high' && <Flag className="w-4 h-4 text-red-500" />}
        </div>
      </div>
      
      <p className="text-sm text-gray-700 mb-3 line-clamp-2">
        {report.content}
      </p>
      
      <div className="flex items-center justify-between text-xs text-gray-500">
        <div className="flex items-center gap-4">
          <span>Type: {report.type}</span>
          <span>Recipients: {report.recipients.length}</span>
          {report.sentAt && <span>Sent: {report.sentAt.toLocaleDateString()}</span>}
          {report.scheduledDate && <span>Scheduled: {report.scheduledDate.toLocaleDateString()}</span>}
        </div>
        
        {showActions && (
          <div className="flex items-center gap-1">
            <Button variant="ghost" size="sm" onClick={onEdit}>
              <Edit className="w-3 h-3" />
            </Button>
            <Button variant="ghost" size="sm" onClick={onSend}>
              <Send className="w-3 h-3" />
            </Button>
            <Button variant="ghost" size="sm" onClick={onDelete}>
              <Trash2 className="w-3 h-3" />
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProgressSharing;