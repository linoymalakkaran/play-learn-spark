import { logger } from '../utils/logger';
import fs from 'fs';
import path from 'path';

// Simple in-memory data store for development
interface DataStore {
  users: any[];
  content: any[];
  activities: any[];
  progress: any[];
  uploads: any[];
}

let dataStore: DataStore = {
  users: [],
  content: [],
  activities: [],
  progress: [],
  uploads: []
};

// Data file path
const DATA_FILE = process.env.DATA_FILE || path.join(__dirname, '../../data/datastore.json');

// Load data from file if it exists
const loadData = (): void => {
  try {
    const dataDir = path.dirname(DATA_FILE);
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }

    if (fs.existsSync(DATA_FILE)) {
      const fileContent = fs.readFileSync(DATA_FILE, 'utf8');
      dataStore = JSON.parse(fileContent);
      logger.info('Data loaded from file successfully');
    } else {
      logger.info('No existing data file found, starting with empty data store');
    }
  } catch (error) {
    logger.warn('Failed to load data from file, starting with empty data store:', error);
  }
};

// Save data to file
const saveData = (): void => {
  try {
    const dataDir = path.dirname(DATA_FILE);
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
    
    fs.writeFileSync(DATA_FILE, JSON.stringify(dataStore, null, 2));
    logger.debug('Data saved to file successfully');
  } catch (error) {
    logger.error('Failed to save data to file:', error);
  }
};

// Simple database operations
export const db = {
  // Get all records from a collection
  findAll: (collection: keyof DataStore) => {
    return [...dataStore[collection]];
  },

  // Find a record by ID
  findById: (collection: keyof DataStore, id: string) => {
    return dataStore[collection].find((item: any) => item.id === id);
  },

  // Create a new record
  create: (collection: keyof DataStore, data: any) => {
    const newRecord = {
      id: Math.random().toString(36).substr(2, 9),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      ...data
    };
    dataStore[collection].push(newRecord);
    saveData();
    return newRecord;
  },

  // Update a record
  update: (collection: keyof DataStore, id: string, updates: any) => {
    const index = dataStore[collection].findIndex((item: any) => item.id === id);
    if (index !== -1) {
      dataStore[collection][index] = {
        ...dataStore[collection][index],
        ...updates,
        updatedAt: new Date().toISOString()
      };
      saveData();
      return dataStore[collection][index];
    }
    return null;
  },

  // Delete a record
  delete: (collection: keyof DataStore, id: string) => {
    const index = dataStore[collection].findIndex((item: any) => item.id === id);
    if (index !== -1) {
      const deleted = dataStore[collection].splice(index, 1)[0];
      saveData();
      return deleted;
    }
    return null;
  },

  // Find records with filters
  findWhere: (collection: keyof DataStore, filters: Record<string, any>) => {
    return dataStore[collection].filter((item: any) => {
      return Object.entries(filters).every(([key, value]) => item[key] === value);
    });
  }
};

export const connectDatabase = async (): Promise<void> => {
  try {
    loadData();
    logger.info('Simple data store initialized successfully');
  } catch (error) {
    logger.error('Failed to initialize data store:', error);
    throw error;
  }
};

export const disconnectDatabase = async (): Promise<void> => {
  try {
    saveData();
    logger.info('Data store disconnected and saved successfully');
  } catch (error) {
    logger.error('Error saving data store:', error);
    throw error;
  }
};

// Initialize with some default data for development
export const initializeDefaultData = (): void => {
  if (dataStore.content.length === 0) {
    dataStore.content = [
      {
        id: '1',
        title: 'Animal Safari Adventure',
        description: 'Learn about different animals and their habitats',
        type: 'activity',
        category: 'science',
        ageGroup: [3, 4, 5],
        difficulty: 'easy',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: '2',
        title: 'Number Garden',
        description: 'Practice counting and basic math with fun garden activities',
        type: 'activity',
        category: 'math',
        ageGroup: [4, 5, 6],
        difficulty: 'medium',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ];
    saveData();
    logger.info('Default content data initialized');
  }
};

export default { db, connectDatabase, disconnectDatabase, initializeDefaultData };