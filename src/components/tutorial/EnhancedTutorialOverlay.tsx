import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { X, ChevronLeft, ChevronRight, Play, Pause, RotateCcw, Volume2, VolumeX } from 'lucide-react';
import { soundEffects } from '@/utils/sounds';

export interface TutorialStep {
  id: string;
  title: string;
  content: string;
  target?: string; // CSS selector for highlighting
  position?: 'top' | 'bottom' | 'left' | 'right' | 'center';
  action?: 'click' | 'hover' | 'type' | 'observe';
  requiredAction?: boolean;
  skipAfter?: number; // Auto advance after X seconds
  voiceOver?: string; // Text to speak
  animation?: 'pulse' | 'bounce' | 'glow' | 'shake';
  interactive?: boolean;
}

export interface TutorialSequence {
  id: string;
  title: string;
  description: string;
  steps: TutorialStep[];
  category: 'onboarding' | 'feature' | 'activity' | 'navigation';
  priority: number;
  triggerCondition?: string;
  icon?: string;
}

interface EnhancedTutorialOverlayProps {
  isVisible: boolean;
  currentStep: number;
  steps: TutorialStep[];
  tutorialInfo: Partial<TutorialSequence>;
  onNext: () => void;
  onPrevious: () => void;
  onSkip: () => void;
  onComplete: () => void;
  onPause?: () => void;
  onResume?: () => void;
  isPaused?: boolean;
}

export const EnhancedTutorialOverlay: React.FC<EnhancedTutorialOverlayProps> = ({
  isVisible,
  currentStep,
  steps,
  tutorialInfo,
  onNext,
  onPrevious,
  onSkip,
  onComplete,
  onPause,
  onResume,
  isPaused = false
}) => {\n  const [highlightedElement, setHighlightedElement] = useState<HTMLElement | null>(null);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [autoAdvanceTimer, setAutoAdvanceTimer] = useState<NodeJS.Timeout | null>(null);\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const speechRef = useRef<SpeechSynthesisUtterance | null>(null);\n\n  const currentStepData = steps[currentStep];\n  const progressPercentage = ((currentStep + 1) / steps.length) * 100;\n\n  // Handle target element highlighting\n  useEffect(() => {\n    if (currentStepData?.target) {\n      const element = document.querySelector(currentStepData.target) as HTMLElement;\n      if (element) {\n        setHighlightedElement(element);\n        \n        // Add highlight class\n        element.classList.add('tutorial-highlight');\n        \n        // Add animation class if specified\n        if (currentStepData.animation) {\n          element.classList.add(`tutorial-${currentStepData.animation}`);\n        }\n        \n        // Scroll element into view\n        element.scrollIntoView({ \n          behavior: 'smooth', \n          block: 'center', \n          inline: 'nearest' \n        });\n        \n        return () => {\n          element.classList.remove('tutorial-highlight');\n          if (currentStepData.animation) {\n            element.classList.remove(`tutorial-${currentStepData.animation}`);\n          }\n        };\n      }\n    }\n  }, [currentStep, currentStepData]);\n\n  // Handle voice over\n  useEffect(() => {\n    if (isAudioEnabled && currentStepData?.voiceOver && 'speechSynthesis' in window) {\n      // Cancel any previous speech\n      speechSynthesis.cancel();\n      \n      const utterance = new SpeechSynthesisUtterance(currentStepData.voiceOver);\n      utterance.rate = 0.9;\n      utterance.pitch = 1.1;\n      utterance.volume = 0.8;\n      \n      speechRef.current = utterance;\n      speechSynthesis.speak(utterance);\n      \n      return () => {\n        speechSynthesis.cancel();\n      };\n    }\n  }, [currentStep, isAudioEnabled, currentStepData]);\n\n  // Handle auto-advance\n  useEffect(() => {\n    if (currentStepData?.skipAfter && !isPaused && !currentStepData.requiredAction) {\n      const timer = setTimeout(() => {\n        onNext();\n      }, currentStepData.skipAfter * 1000);\n      \n      setAutoAdvanceTimer(timer);\n      \n      return () => {\n        if (timer) clearTimeout(timer);\n      };\n    }\n  }, [currentStep, isPaused, currentStepData, onNext]);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isVisible) return;\n      \n      switch (e.key) {\n        case 'ArrowRight':\n        case 'Space':\n          e.preventDefault();\n          if (currentStep < steps.length - 1) {\n            onNext();\n          } else {\n            onComplete();\n          }\n          break;\n        case 'ArrowLeft':\n          e.preventDefault();\n          if (currentStep > 0) {\n            onPrevious();\n          }\n          break;\n        case 'Escape':\n          e.preventDefault();\n          onSkip();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isVisible, currentStep, steps.length, onNext, onPrevious, onSkip, onComplete]);\n\n  // Play sound effects\n  const playStepSound = async () => {\n    await soundEffects.playSuccess();\n  };\n\n  const handleNext = async () => {\n    await playStepSound();\n    if (currentStep < steps.length - 1) {\n      onNext();\n    } else {\n      onComplete();\n    }\n  };\n\n  const handlePrevious = async () => {\n    await soundEffects.playClick();\n    onPrevious();\n  };\n\n  const handleSkip = async () => {\n    await soundEffects.playClick();\n    onSkip();\n  };\n\n  const toggleAudio = () => {\n    setIsAudioEnabled(!isAudioEnabled);\n    if (isAudioEnabled) {\n      speechSynthesis.cancel();\n    }\n  };\n\n  const handlePause = () => {\n    if (autoAdvanceTimer) {\n      clearTimeout(autoAdvanceTimer);\n      setAutoAdvanceTimer(null);\n    }\n    onPause?.();\n  };\n\n  if (!isVisible || !currentStepData) return null;\n\n  return (\n    <>\n      {/* Tutorial Styles */}\n      <style jsx global>{`\n        .tutorial-highlight {\n          position: relative;\n          z-index: 1001;\n          box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.5), 0 0 0 8px rgba(59, 130, 246, 0.2);\n          border-radius: 8px;\n          transition: all 0.3s ease;\n        }\n        \n        .tutorial-pulse {\n          animation: tutorial-pulse 2s infinite;\n        }\n        \n        .tutorial-bounce {\n          animation: tutorial-bounce 1s infinite;\n        }\n        \n        .tutorial-glow {\n          animation: tutorial-glow 2s ease-in-out infinite alternate;\n        }\n        \n        .tutorial-shake {\n          animation: tutorial-shake 0.5s;\n        }\n        \n        @keyframes tutorial-pulse {\n          0%, 100% { transform: scale(1); }\n          50% { transform: scale(1.05); }\n        }\n        \n        @keyframes tutorial-bounce {\n          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }\n          40% { transform: translateY(-10px); }\n          60% { transform: translateY(-5px); }\n        }\n        \n        @keyframes tutorial-glow {\n          from { box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.5), 0 0 20px rgba(59, 130, 246, 0.3); }\n          to { box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.8), 0 0 30px rgba(59, 130, 246, 0.6); }\n        }\n        \n        @keyframes tutorial-shake {\n          0%, 100% { transform: translateX(0); }\n          10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }\n          20%, 40%, 60%, 80% { transform: translateX(2px); }\n        }\n      `}</style>\n\n      {/* Overlay Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-1000 transition-opacity duration-300\"\n        onClick={handleSkip}\n      />\n\n      {/* Tutorial Card */}\n      <div\n        ref={overlayRef}\n        className=\"fixed z-1002 max-w-md w-full mx-4\"\n        style={{\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)'\n        }}\n      >\n        <Card className=\"border-2 border-primary/20 shadow-2xl bg-background/95 backdrop-blur-md\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                {tutorialInfo.icon && (\n                  <span className=\"text-2xl\">{tutorialInfo.icon}</span>\n                )}\n                <div>\n                  <CardTitle className=\"text-lg font-['Comic_Neue'] text-primary\">\n                    {currentStepData.title}\n                  </CardTitle>\n                  {tutorialInfo.title && (\n                    <CardDescription className=\"text-sm text-muted-foreground\">\n                      {tutorialInfo.title}\n                    </CardDescription>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={toggleAudio}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  {isAudioEnabled ? \n                    <Volume2 className=\"h-4 w-4\" /> : \n                    <VolumeX className=\"h-4 w-4\" />\n                  }\n                </Button>\n                \n                {onPause && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={isPaused ? onResume : handlePause}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    {isPaused ? \n                      <Play className=\"h-4 w-4\" /> : \n                      <Pause className=\"h-4 w-4\" />\n                    }\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleSkip}\n                  className=\"h-8 w-8 p-0 text-muted-foreground hover:text-foreground\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            {/* Progress */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>Step {currentStep + 1} of {steps.length}</span>\n                <span>{Math.round(progressPercentage)}%</span>\n              </div>\n              <Progress value={progressPercentage} className=\"h-2\" />\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-4\">\n            {/* Step Content */}\n            <div className=\"prose prose-sm max-w-none\">\n              <p className=\"text-foreground font-['Comic_Neue'] leading-relaxed\">\n                {currentStepData.content}\n              </p>\n            </div>\n\n            {/* Action Required Badge */}\n            {currentStepData.requiredAction && (\n              <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n                Action Required: {currentStepData.action || 'interact'}\n              </Badge>\n            )}\n\n            {/* Auto-advance indicator */}\n            {currentStepData.skipAfter && !isPaused && !currentStepData.requiredAction && (\n              <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                <RotateCcw className=\"h-3 w-3 animate-spin\" />\n                Auto-advancing in {currentStepData.skipAfter}s\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handlePrevious}\n                disabled={currentStep === 0}\n                className=\"flex items-center gap-1\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleSkip}\n                  className=\"text-muted-foreground\"\n                >\n                  Skip Tutorial\n                </Button>\n                \n                <Button\n                  onClick={handleNext}\n                  size=\"sm\"\n                  className=\"flex items-center gap-1\"\n                >\n                  {currentStep === steps.length - 1 ? 'Complete' : 'Next'}\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Keyboard shortcuts hint */}\n            <div className=\"text-xs text-muted-foreground pt-2 border-t\">\n              <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Space</kbd> Next • \n              <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">←→</kbd> Navigate • \n              <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Esc</kbd> Skip\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n};\n\nexport default EnhancedTutorialOverlay;